name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE: chinmay153/todo
  EC2_HOST: 54.161.195.40
  EC2_USER: ubuntu

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.DOCKER_IMAGE }}:latest
          ${{ env.DOCKER_IMAGE }}:${{ github.run_number }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ env.EC2_HOST }}
        username: ${{ env.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Stop and remove existing container
          docker stop calculator-app || true
          docker rm calculator-app || true
          
          # Remove old image to save space
          docker rmi ${{ env.DOCKER_IMAGE }}:latest || true
          
          # Pull latest image
          docker pull ${{ env.DOCKER_IMAGE }}:latest
          
          # Run new container
          docker run -d --name calculator-app -p 80:80 --restart unless-stopped ${{ env.DOCKER_IMAGE }}:latest
          
          # Verify deployment
          sleep 10
          docker ps | grep calculator-app

    - name: Health Check
      run: |
        # Wait for application to start
        sleep 30
        
        # Test if application is responding
        curl -f http://${{ env.EC2_HOST }}/ || exit 1
        echo "Application is running successfully!"

    - name: Cleanup old images
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ env.EC2_HOST }}
        username: ${{ env.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Clean up old Docker images (keep last 3)
          docker image prune -f
          docker images ${{ env.DOCKER_IMAGE }} --format "table {{.Repository}}:{{.Tag}}\t{{.ID}}" | tail -n +2 | head -n -3 | awk '{print $2}' | xargs -r docker rmi || true
